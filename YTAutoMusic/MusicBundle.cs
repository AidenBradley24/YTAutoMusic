using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace YTAutoMusic
{
    internal class MusicBundle
    {
        public string Title { get; private set; }
        public FileInfo File { get; private set; }
        public string ID { get; private set; }

        public MusicBundle(FileInfo file, string id, string title)
        {
            File = file;
            ID = id;
            Title = title;
        }

        public void Auto(TagLib.File tagFile, string description, PlaylistBundle playlist)
        {
            string title = Title;
            string titlePlusDescription = title + "\n" + description;

            bool finished = false;

            if(description.Contains("Provided to YouTube by"))
            {
                /*
                 * Provided to YouTube by INSERTCOMPANYHERE
                 * 
                 * Title · Artist
                 * 
                 * Album
                 * 
                 * ℗
                 * 
                 * Relesased on: YYYY-MM-DD
                 * 
                 * ...
                 * 
                 * Auto-generated by YouTube.
                 */

                try
                {
                    string[] lines = LineifyDescription(description);

                    Debug.Assert(lines[0].Contains("Provided to YouTube by"));

                    tagFile.Tag.Title = title;

                    StandardPerformers(lines, tagFile);

                    tagFile.Tag.Album = lines[2].Trim();

                    tagFile.Tag.Copyright = lines[3].Trim();

                    tagFile.Tag.Year = (uint)DateTime.ParseExact(lines[4].Trim()[14..], "yyyy-MM-dd", CultureInfo.InvariantCulture).Year;

                    finished = true;
                    Console.WriteLine("Used information provided by YouTube to fill metadata.");
                }
                catch
                {
                    Console.WriteLine("Tried to use 'provided by' config. Failed.");
                }
            }
            else if(IsStandaloneWord("OST", titlePlusDescription, out int index) || IsStandaloneWord("Soundtrack", titlePlusDescription, out index))
            {


                tagFile.Tag.Album = SnipLeftToSeperator(titlePlusDescription, index);
                index = SkipOneSeperatorRight(titlePlusDescription, index);
                tagFile.Tag.Title = SnipRightToSeperator(titlePlusDescription, index);
                finished = true;
            }

            if (!finished)
            {
                tagFile.Tag.Title = title;
                tagFile.Tag.Album = playlist.Name;
            }
        }

        private static string[] LineifyDescription(string description)
        {
            string[] lines = description.Split('\n', StringSplitOptions.RemoveEmptyEntries);
            for (int i = 0; i < lines.Length; i++)
            {
                lines[i] = lines[i].Trim();
            }

            return lines;
        }

        private static void StandardPerformers(string[] lines, TagLib.File tagFile)
        {
            string[] performers = lines[1].Split('·')[1..];
            for (int i = 0; i < performers.Length; i++)
            {
                performers[i] = performers[i].Trim();
            }

            tagFile.Tag.Performers = performers;
        }

        public static bool IsStandaloneWord(string word, string sentence, out int index)
        {
            index = sentence.IndexOf(word, StringComparison.OrdinalIgnoreCase);

            if(index == -1)
            {
                return false;
            }

            if(index != 0 && !char.IsWhiteSpace(sentence[index - 1]))
            {
                return false;
            }

            if(index + word.Length < sentence.Length - 1 && !char.IsWhiteSpace(sentence[index + word.Length]))
            {
                return false;
            }

            index += word.Length;

            return true;
        }

        private static readonly HashSet<char> seperators = new(){'-', '\u2012', '\u2013', '\u2014', '\u2015', '(', '[', '{', '|', '·' };

        public static string SnipLeftToSeperator(string text, int rightEdge)
        {
            int leftEdge = 0;

            for (int i = rightEdge - 1; i >= 0; i--)
            {
                char c = text[i];
                if(seperators.Contains(c))
                {
                    leftEdge = i + 1;
                }
            }

            return text[leftEdge..rightEdge].Trim();
        }

        public static string SnipRightToSeperator(string text, int leftEdge)
        {
            int rightEdge = text.Length;

            for (int i = leftEdge; i < text.Length; i++)
            {
                char c = text[i];
                if (seperators.Contains(c))
                {
                    rightEdge = i;
                }
            }

            return text[leftEdge..rightEdge].Trim();
        }

        public static int SkipOneSeperatorRight(string text, int index)
        {
            for (int i = index; i < text.Length; i++)
            {
                char c = text[i];
                if (seperators.Contains(c))
                {
                    if(i + 1 >= text.Length)
                    {
                        return index;
                    }

                    return i + 1;
                }
            }

            return index;
        }
    }
}
