using System.Diagnostics;
using System.Globalization;

namespace YTAutoMusic
{
    internal class MusicBundle
    {
        public string Title { get; private set; }
        public FileInfo File { get; private set; }
        public string ID { get; private set; }

        private static readonly char[] seperators = { '-', '\u2012', '\u2013', '\u2014', '\u2015', '(', '[', '{', ')', ']', '}' , '|', '·', '\uFF02', '\u0022', '\u201C', '\u201D', '\u201E', '\u201F' };

        public MusicBundle(FileInfo file, string id, string title)
        {
            File = file;
            ID = id;
            Title = title;
        }

        public void Auto(TagLib.File tagFile, string description, PlaylistBundle playlist)
        {
            string title = Title;
            string titlePlusDescription = title + "\n" + description;

            bool finished = false;

            if (description.Contains("Provided to YouTube by"))
            {
                /*
                 * Provided to YouTube by INSERTCOMPANYHERE
                 * 
                 * Title · Artist
                 * 
                 * Album
                 * 
                 * ℗
                 * 
                 * Released on: YYYY-MM-DD
                 * 
                 * ...
                 * 
                 * Auto-generated by YouTube.
                 */

                try
                {
                    string[] lines = LineifyDescription(description);

                    Debug.Assert(lines[0].Contains("Provided to YouTube by"));

                    tagFile.Tag.Title = title;

                    string[] performers = lines[1].Split('·')[1..];
                    for (int i = 0; i < performers.Length; i++)
                    {
                        performers[i] = performers[i].Trim();
                    }

                    tagFile.Tag.Performers = performers;
                    tagFile.Tag.Album = lines[2].Trim();

                    tagFile.Tag.Copyright = lines[3].Trim();

                    tagFile.Tag.Year = (uint)DateTime.ParseExact(lines[4].Trim()[13..], "yyyy-MM-dd", CultureInfo.InvariantCulture).Year;

                    finished = true;
                    Console.WriteLine("Used information provided by YouTube to fill metadata.");
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Tried to use 'provided by' config. Failed.");
                    Console.WriteLine(ex);
                }
            }
            else if (IsStandaloneWord("OST", title, out string usedWord) || IsStandaloneWord("Soundtrack", title, out usedWord))
            {
                try
                {
                    var bits = title.Split(seperators, StringSplitOptions.RemoveEmptyEntries);

                    int i;
                    for (i = 0; i < bits.Length; i++)
                    {
                        if (IsStandaloneWord(usedWord, bits[i], out _))
                        {
                            break;
                        }
                    }

                    int soundtrackIndex = i;

                    if (i < bits.Length)
                    {
                        string album = bits[i].Trim();
                        int blacklist = -1;

                        if (album == usedWord)
                        {
                            i--;
                            if (i < 0)
                            {
                                throw new IndexOutOfRangeException("Can't find soundtrack name");
                            }

                            blacklist = i;

                            album = bits[i].Trim();
                            if(album.Length == 0)
                            {
                                throw new FormatException("Can't find soundtrack name");
                            }
                        }

                        tagFile.Tag.Album = album;

                        i++;

                        string t = null;

                        for (; i < bits.Length; i++)
                        {
                            if (i == blacklist) continue;

                            string bit = bits[i].Trim(' ', '\n', '\t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9');
                            if (string.IsNullOrWhiteSpace(bit))
                            {
                                continue;
                            }

                            t = bit;
                        }

                        i = soundtrackIndex - 1;

                        if (t == null)
                        {
                            for (; i >= 0; i--)
                            {
                                if (i == blacklist) continue;

                                string bit = bits[i].Trim(' ', '\n', '\t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9');
                                if (string.IsNullOrWhiteSpace(bit))
                                {
                                    continue;
                                }

                                t = bit;
                            }
                        }

                        tagFile.Tag.Title = t;
                    }

                    tagFile.Tag.Genres = new string[]{ "Soundtrack" };
                    finished = true;
                    Console.WriteLine("Parsed YT title to fill metadata.");
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Tried to use 'OST / soundtrack' config. Failed.");
                    Console.WriteLine(ex);
                }
            }

            if (!finished)
            {
                tagFile.Tag.Title = title;
                tagFile.Tag.Album = "";
            }
        }

        private static string[] LineifyDescription(string description)
        {
            return description.Split('\n', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);
        }

        public static bool IsStandaloneWord(string word, string sentence, out string usedWord)
        {
            int index = sentence.IndexOf(word, StringComparison.OrdinalIgnoreCase);
            usedWord = word;

            if (index == -1)
            {
                return false;
            }

            if (index != 0 && char.IsLetterOrDigit(sentence[index - 1]))
            {
                return false;
            }

            if (index + word.Length < sentence.Length - 1 && char.IsLetterOrDigit(sentence[index + word.Length]))
            {
                return false;
            }

            return true;
        }
    }
}
